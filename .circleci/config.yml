version: 2

experimental:
  notify:
    branches:
      only:
        - master

defaults: &defaults
  docker:
    - image: circleci/node:12.14.1
      environment:
        MOCHA_FILE: $CIRCLE_TEST_REPORTS/junit/test-results.xml
      auth:
        username: $DOCKERHUB_USERNAME
        password: $DOCKERHUB_TOKEN

jobs:
  lint:
    working_directory: ~/rainforestapp/tester-chrome-extension
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          key: v1-tester-chrome-{{ checksum "package.json" }}
      - run:
          name: NPM install
          command: npm install
      - run:
          name: Lint source
          command: npm run lint
  test:
    working_directory: ~/rainforestapp/tester-chrome-extension
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          key: v1-tester-chrome-{{ checksum "package.json" }}
      - run:
          name: NPM install
          command: npm install
      - save_cache:
          key: v1-tester-chrome-{{ checksum "package.json" }}
          paths:
            - ~/rainforestapp/tester-chrome-extension/node_modules
      - run:
          name: Run tests
          command: npm run test:ci
  merge_to_master:
    docker:
      - image: gcr.io/rf-public-images/circlemator:latest
    steps:
      - run:
          name: Merge to master
          command: circlemator self-merge --base-branch=master --compare-branch=develop
  upload_staging:
    working_directory: ~/rainforestapp/tester-chrome-extension
    docker:
      - image: cimg/python:3.9.1-node
        environment:
          MOCHA_FILE: $CIRCLE_TEST_REPORTS/junit/test-results.xml
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_TOKEN
    steps:
      - checkout
      - run:
          name: Update Node and NPM
          command: |
            curl -sSL "https://nodejs.org/dist/v12.14.1/node-v12.14.1-linux-x64.tar.xz" | sudo tar --strip-components=2 -xJ -C /usr/local/bin/ node-v12.14.1-linux-x64/bin/node
            curl https://www.npmjs.com/install.sh | sudo bash
      - run:
          name: Install awscli
          command: pip install awscli==1.11.185
      - restore_cache:
          key: v1-tester-chrome-extension-{{ checksum "package.json" }}
      - run:
          name: NPM install
          command: npm install
      - run:
          name: Build stage
          command: ./deploy stg
      - run:
          name: Move extension manifest
          command: mv staging_manifest.json extension/manifest.json
      - run:
          name: Zip extension
          command: cd extension && mkdir /tmp/extension && zip -r /tmp/extension/extension-$CIRCLE_SHA1.zip . -x *.git* -x circle.yml -x *.DS_Store*
      - store_artifacts:
          path: /tmp/extension
  update_staging_sha_gke:
    docker:
      - image: gcr.io/rf-public-images/helm-deploy:latest
        environment:
          HELM_TLS_VERIFY: "true"
    steps:
      - checkout
      - run:
          name: Login to gcp
          command: gcp-login
      - run:
          name: Set up Helm TLS
          command: helm-tls-setup
      - run:
          name: Login to staging cluster
          command: gcloud container clusters get-credentials staging --project rf-stg --zone us-east1-b
      - run:
          name: Update staging SHA
          command: |
            if [ "$(kubectl get configmap schrute-config -n staging -o json | jq -r '.data.PLUGIN_VERSION')" != "$CIRCLE_SHA1" ]; then
                kubectl patch configmap schrute-config -n staging -p "{\"data\":{\"PLUGIN_VERSION\":\"$CIRCLE_SHA1\"}}"
                restart schrute-staging
            fi
  update_production_sha_gke:
    docker:
      - image: gcr.io/rf-public-images/helm-deploy:latest
        environment:
          HELM_TLS_VERIFY: "true"
    steps:
      - checkout
      - run:
          name: Login to gcp
          command: gcp-login
      - run:
          name: Set up Helm TLS
          command: helm-tls-setup
      - run:
          name: Login to production cluster
          command: gcloud container clusters get-credentials production --project rf-prd --zone us-east1
      - run:
          name: Update production SHA
          command: |
            if [ "$(kubectl get configmap schrute-config -n production -o json | jq -r '.data.PLUGIN_VERSION')" != "$CIRCLE_SHA1" ]; then
                kubectl patch configmap schrute-config -n production -p "{\"data\":{\"PLUGIN_VERSION\":\"$CIRCLE_SHA1\"}}"
                restart schrute-production
            fi
  run_rainforest:
    docker:
      - image: gcr.io/rf-public-images/rainforest-cli:latest
    steps:
      - run:
          name: Run Rainforest
          command:
            rainforest-cli run --token "$RAINFOREST_TOKEN" --environment-id 356 --run-group 6940 --crowd automation --conflict abort --description "tester-chrome-extension - $CIRCLE_BRANCH $CIRCLE_BUILD_NUM"
  upload_production:
    docker:
      - image: circleci/node:12.14.1
        environment:
          MOCHA_FILE: $CIRCLE_TEST_REPORTS/junit/test-results.xml
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_TOKEN
    steps:
      - checkout
      - run:
          name: Install awscli
          command: sudo apt-get -y -qq install awscli
      - restore_cache:
          key: v1-tester-chrome-extension-{{ checksum "package.json" }}
      - run:
          name: NPM install
          command: npm install
      - run:
          name: Build stage
          command: ./deploy prd
      - run:
          name: Move extension manifest
          command: mv production_manifest.json extension/manifest.json
      - run:
          name: Zip extension
          command: cd extension && mkdir /tmp/extension && zip -r extension-$CIRCLE_SHA1.zip . -x *.git* -x circle.yml -x *.DS_Store*
      - store_artifacts:
          path: /tmp/extension

workflows:
  version: 2
  test_and_deploy:
    jobs:
      - lint:
          filters:
            branches:
              ignore:
                - master
                - develop
          context:
            - DockerHub
      - test:
          context:
            - DockerHub
      - upload_staging:
          requires:
            - test
          # filters:
          #   branches:
          #     only:
          #       - develop
          context:
            - DockerHub
      - update_staging_sha_gke:
          requires:
            - upload_staging
          filters:
            branches:
              only:
                - develop
      - run_rainforest:
          requires:
            - update_staging_sha_gke
          filters:
            branches:
              only:
                - develop
      - merge_to_master:
          requires:
            - run_rainforest
          filters:
            branches:
              only:
                - develop
      - upload_production:
          filters:
            branches:
              only:
                - master
      - update_production_sha_gke:
          requires:
            - upload_production
          filters:
            branches:
              only:
                - master
